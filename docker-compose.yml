# =============================================================================
# Docker Compose - Local Development Environment
# =============================================================================
# Usage: docker-compose up
# This will start MongoDB, Redis, and the Node.js application
# =============================================================================

# Docker Compose version is now optional (3.8+)
# version: "3.8"

services:
  # # ---------------------------------------------------------------------------
  # # MongoDB Database
  # # ---------------------------------------------------------------------------
  # mongodb:
  #   image: mongo:7
  #   container_name: aeo-mongodb
  #   restart: unless-stopped
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db
  #     - mongodb_config:/data/configdb
  #   environment:
  #     - MONGO_INITDB_DATABASE=aeo-dev
  #   networks:
  #     - aeo-network
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # # ---------------------------------------------------------------------------
  # # Redis Cache
  # # ---------------------------------------------------------------------------
  # redis:
  #   image: redis:7-alpine
  #   container_name: aeo-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - aeo-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   command: redis-server --appendonly yes

  # ---------------------------------------------------------------------------
  # Node.js Application
  # ---------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aeo-server
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://aeo-redis-prod:6379/0
      # Auth Configuration
      - AUTH_PROVIDER=${AUTH_PROVIDER:-cognito}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      # Cognito Configuration
      - COGNITO_REGION=${COGNITO_REGION}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_APP_CLIENT_ID=${COGNITO_APP_CLIENT_ID}
      - COGNITO_DOMAIN=${COGNITO_DOMAIN}
      - OAUTH_REDIRECT_URI=${OAUTH_REDIRECT_URI}
      - OAUTH_LOGOUT_REDIRECT_URI=${OAUTH_LOGOUT_REDIRECT_URI}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_TTL_SECONDS=${SESSION_TTL_SECONDS:-28800}
      - COOKIE_NAME=${COOKIE_NAME:-aeo_session}
      # OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - LINKEDIN_REDIRECT_URI=${LINKEDIN_REDIRECT_URI}
      # Frontend URLs
      - CLIENT_URL=${CLIENT_URL:-https://themoda.io}
      - FRONTEND_URL=${FRONTEND_URL:-https://themoda.io}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Payment & Email Services (commented out - not currently used)
      # - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      # - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      # - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      # - SENDGRID_TEMPLATE_IDS=${SENDGRID_TEMPLATE_IDS}
      - USE_MOCK_EMAIL=${USE_MOCK_EMAIL:-true}
      - PAGESPEED_API_KEY=${PAGESPEED_API_KEY}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      # Mount source for development (hot reload)
      - ./src:/app/src:ro
      - ./dist:/app/dist
      # Prevent node_modules from being overwritten
      - /app/node_modules
    networks:
      - aeo-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# =============================================================================
# Networks
# =============================================================================
networks:
  aeo-network:
    driver: bridge
# =============================================================================
# Volumes (Not needed - using MongoDB Atlas & Cloud Redis)
# =============================================================================
# volumes:
#   mongodb_data:
#     driver: local
#   mongodb_config:
#     driver: local
#   redis_data:
#     driver: local
