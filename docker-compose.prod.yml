# =============================================================================
# Docker Compose - Production Environment
# =============================================================================
# Usage: docker-compose -f docker-compose.prod.yml up -d
# This configuration is optimized for production deployment
# =============================================================================

# Docker Compose version is now optional (3.8+)
# version: "3.8"

services:
  # # ---------------------------------------------------------------------------
  # # MongoDB Database (Production)
  # # ---------------------------------------------------------------------------
  # mongodb:
  #   image: mongo:7
  #   container_name: aeo-mongodb-prod
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db
  #     - mongodb_config:/data/configdb
  #   environment:
  #     - MONGO_INITDB_DATABASE=aeo-production
  #   networks:
  #     - aeo-network
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 40s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # ---------------------------------------------------------------------------
  # Redis Cache (Production)
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: aeo-redis-prod
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aeo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ---------------------------------------------------------------------------
  # Node.js Application - Blue Instance
  # ---------------------------------------------------------------------------
  app-blue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aeo-server-blue
    restart: always
    ports:
      - "5001:5000" # Expose to host for native nginx
    environment:
      - NODE_ENV=production
      - PORT=5000
      # Database (MongoDB Atlas + Redis)
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      # Auth Configuration
      - AUTH_PROVIDER=${AUTH_PROVIDER}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      # Cognito Configuration (both naming conventions for compatibility)
      - AWS_REGION=${AWS_REGION}
      - COGNITO_REGION=${AWS_REGION}
      - AWS_COGNITO_USER_POOL_ID=${AWS_COGNITO_USER_POOL_ID}
      - COGNITO_USER_POOL_ID=${AWS_COGNITO_USER_POOL_ID}
      - AWS_COGNITO_CLIENT_ID=${AWS_COGNITO_CLIENT_ID}
      - COGNITO_APP_CLIENT_ID=${AWS_COGNITO_CLIENT_ID}
      - AWS_COGNITO_CLIENT_SECRET=${AWS_COGNITO_CLIENT_SECRET}
      - COGNITO_APP_CLIENT_SECRET=${COGNITO_APP_CLIENT_SECRET}
      - AWS_COGNITO_DOMAIN=${AWS_COGNITO_DOMAIN}
      - COGNITO_DOMAIN=${AWS_COGNITO_DOMAIN}
      - OAUTH_REDIRECT_URI=${OAUTH_REDIRECT_URI}
      - OAUTH_LOGOUT_REDIRECT_URI=${OAUTH_LOGOUT_REDIRECT_URI}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_TTL_SECONDS=${SESSION_TTL_SECONDS:-28800}
      - COOKIE_NAME=${COOKIE_NAME:-aeo_session}
      # OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - LINKEDIN_REDIRECT_URI=${LINKEDIN_REDIRECT_URI}
      # Frontend URLs
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      # - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      # - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      # - SENDGRID_TEMPLATE_IDS=${SENDGRID_TEMPLATE_IDS}
      - USE_MOCK_EMAIL=${USE_MOCK_EMAIL:-true}
      - PAGESPEED_API_KEY=${PAGESPEED_API_KEY}
      # AWS Configuration
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}

    networks:
      - aeo-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ---------------------------------------------------------------------------
  # Node.js Application - Green Instance (for zero-downtime deployment)
  # ---------------------------------------------------------------------------
  app-green:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aeo-server-green
    restart: always
    ports:
      - "5002:5000" # Expose to host for native nginx
    environment:
      - NODE_ENV=production
      - PORT=5000
      # Database (MongoDB Atlas + Redis)
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      # Auth Configuration
      - AUTH_PROVIDER=${AUTH_PROVIDER}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      # Cognito Configuration (both naming conventions for compatibility)
      - AWS_REGION=${AWS_REGION}
      - COGNITO_REGION=${AWS_REGION}
      - AWS_COGNITO_USER_POOL_ID=${AWS_COGNITO_USER_POOL_ID}
      - COGNITO_USER_POOL_ID=${AWS_COGNITO_USER_POOL_ID}
      - AWS_COGNITO_CLIENT_ID=${AWS_COGNITO_CLIENT_ID}
      - COGNITO_APP_CLIENT_ID=${AWS_COGNITO_CLIENT_ID}
      - AWS_COGNITO_CLIENT_SECRET=${AWS_COGNITO_CLIENT_SECRET}
      - COGNITO_APP_CLIENT_SECRET=${COGNITO_APP_CLIENT_SECRET}
      - AWS_COGNITO_DOMAIN=${AWS_COGNITO_DOMAIN}
      - COGNITO_DOMAIN=${AWS_COGNITO_DOMAIN}
      - OAUTH_REDIRECT_URI=${OAUTH_REDIRECT_URI}
      - OAUTH_LOGOUT_REDIRECT_URI=${OAUTH_LOGOUT_REDIRECT_URI}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_TTL_SECONDS=${SESSION_TTL_SECONDS:-28800}
      - COOKIE_NAME=${COOKIE_NAME:-aeo_session}
      # OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - LINKEDIN_REDIRECT_URI=${LINKEDIN_REDIRECT_URI}
      # Frontend URLs
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      # - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      # - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      # - SENDGRID_TEMPLATE_IDS=${SENDGRID_TEMPLATE_IDS}
      - USE_MOCK_EMAIL=${USE_MOCK_EMAIL:-true}
      - PAGESPEED_API_KEY=${PAGESPEED_API_KEY}
      # AWS Configuration
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}

    networks:
      - aeo-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

# =============================================================================
# Networks
# =============================================================================
networks:
  aeo-network:
    driver: bridge
# =============================================================================
# Volumes (Redis needed for OAuth state management)
# =============================================================================
volumes:
  redis_data:
    driver: local
